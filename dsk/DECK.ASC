10 DEFINT A-Z
20 REM MX=max sprite number per pose, R=max height of character
20 MX=6:X1=0:X2=127:DX=2:Y=40:MB=0:V=0:O=0:SU=0:I=0:J=0:K=0:M=0:N=0:R=11:LS=0:RS=2:DIM SA(3,31):EM$=""
30 ON STOP GOSUB 3000:STOP ON
40 FOR I=0 TO 31:SA(0,I)=256:SA(1,I)=256:SA(3,I)=11:NEXT
50 _ARTINFO(V,O,MB)
55 IF (32768-MB)<2*R*256 THEN EM$="Not enough memory in page 1":GOTO 3000
60 COLOR 1,15,15:SCREEN 2,2,0
70 BLOAD"DECK.SC2",S
80 REM fixup screen
80 _VRMMEM(BASE(12),MB,16*256):_VRMMEM(BASE(11),&H3000,16*256)
90 _MEMVRM(MB,BASE(12)+2048,16*256,0):_MEMVRM(&H3000,BASE(11)+2048,16*256,0)
100 _FILVRM(BASE(12),2048,0,0):_FILVRM(BASE(11),2048,&H1F,0)
120 REM load font and print fight status screen
120 BLOAD"FONT1.BIN",&HC000:_MEMVRM(&HC000,BASE(12)+32*8,768,0)
121 RESTORE 30000:FOR I=34*8 TO 42*8-1:READ O:VPOKE BASE(12)+I,O:NEXT
122 POKE &HFCAF,1:O=BASE(10):_FILVRM(O,256,32,0)
123 POKE &HF922,O MOD 256:POKE &HF3BD,O MOD 256:POKE &HF923,O\256:POKE &HF9BE,O\256:POKE &HF3AF,32:POKE &HF3B0,32:POKE &HF3B1,24
124 LOCATE 0,0:PRINT "  JACK SPARROW  VS ENEMY CAPTAIN"
125 LOCATE 0,2:PRINT CHR$(34);STRING$(30,35);CHR$(36)
126 LOCATE 0,3:PRINT CHR$(37);"        SHIP      JACK SPARROW";CHR$(38)
127 LOCATE 0,4:PRINT CHR$(37);SPACE$(30);CHR$(38)
128 LOCATE 0,5:PRINT CHR$(37);"MORALE: STRONG    SHAKEN      ";CHR$(38)
129 LOCATE 0,6:PRINT CHR$(39);STRING$(30,40);CHR$(41)
130 REM first read the number of poses x2, then define arrays for width,height,size,mem location, sprite offset, x and y offset
130 RESTORE 9000:READ O:DIM W(O-1),H(O-1),S(O-1),L(O-1),P(O-1),XO(O-1),YO(O-1):V=&H100
140 REM READ PLAYER SOFT SPRITES
140 FOR I=0 TO O-1
150 READ W(I),H(I),XO(I),YO(I),A$:S(I)=W(I)*H(I)*8:L(I)=V
160 BLOAD A$,&HC000:_MEMCPY(&HC000,V,2*S(I)):V=V+2*S(I):IF V>=&H4000 THEN EM$="Too many soft sprites":GOTO3000
170 NEXT

200 'LOAD SPRITES AND FORM SPRITE GROUPS, STORE STARTING PATTERN
200 'ASSUME FIRST <MX> SPRITES FOR LEFT, AND SECOND <MX> SPRITES FOR RIGHT PLAYER
200 DIM LA(2,MX-1),LB(2,MX-1),LC(2,MX-1),LD(2,MX-1),LE(2,MX-1),LF(2,MX-1)
210 DIM RA(2,MX-1),RB(2,MX-1),RC(2,MX-1),RD(2,MX-1),RE(2,MX-1),RF(2,MX-1):V=0
220 'SINCE VARIABLES ARE SEPARATE, CODE BLOCK FOR EACH STANCE, FIRST FOR LEFT THEN RIGHT
220 P(0)=V:READ O:FOR I=0 TO MX-1:LA(0,I)=I:IF I<O THEN READ LA(2,I),LA(1,I) ELSE LA(2,I)=256:LA(1,I)=256:GOTO 240
230 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
240 NEXT I
250 P(1)=V:READ O:FOR I=0 TO MX-1:RA(0,I)=I+MX:IF I<O THEN READ RA(2,I),RA(1,I) ELSE RA(2,I)=256:RA(1,I)=256:GOTO 270
260 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
270 NEXT I

280 P(2)=V:READ O:FOR I=0 TO MX-1:LB(0,I)=I:IF I<O THEN READ LB(2,I),LB(1,I) ELSE LB(2,I)=256:LB(1,I)=256:GOTO 300
290 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
300 NEXT I
310 P(3)=V:READ O:FOR I=0 TO MX-1:RB(0,I)=I+MX:IF I<O THEN READ RB(2,I),RB(1,I) ELSE RB(2,I)=256:RB(1,I)=256:GOTO 330
320 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
330 NEXT I

340 P(4)=V:READ O:FOR I=0 TO MX-1:LC(0,I)=I:IF I<O THEN READ LC(2,I),LC(1,I) ELSE LC(2,I)=256:LC(1,I)=256:GOTO 360
350 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
360 NEXT I
370 P(5)=V:READ O:FOR I=0 TO MX-1:RC(0,I)=I+MX:IF I<O THEN READ RC(2,I),RC(1,I) ELSE RC(2,I)=256:RC(1,I)=256:GOTO 390
380 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
390 NEXT I

400 P(6)=V:READ O:FOR I=0 TO MX-1:LD(0,I)=I:IF I<O THEN READ LD(2,I),LD(1,I) ELSE LD(2,I)=256:LD(1,I)=256:GOTO 420
410 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
420 NEXT I
430 P(7)=V:READ O:FOR I=0 TO MX-1:RD(0,I)=I+MX:IF I<O THEN READ RD(2,I),RD(1,I) ELSE RD(2,I)=256:RD(1,I)=256:GOTO 450
440 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
450 NEXT I

460 P(8)=V:READ O:FOR I=0 TO MX-1:LE(0,I)=I:IF I<O THEN READ LE(2,I),LE(1,I) ELSE LE(2,I)=256:LE(1,I)=256:GOTO 480
470 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
480 NEXT I
490 P(9)=V:READ O:FOR I=0 TO MX-1:RE(0,I)=I+MX:IF I<O THEN READ RE(2,I),RE(1,I) ELSE RE(2,I)=256:RE(1,I)=256:GOTO 510
500 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
510 NEXT I

520 P(10)=V:READ O:FOR I=0 TO MX-1:LF(0,I)=I:IF I<O THEN READ LF(2,I),LF(1,I) ELSE LF(2,I)=256:LF(1,I)=256:GOTO 540
530 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
540 NEXT I
550 P(11)=V:READ O:FOR I=0 TO MX-1:RF(0,I)=I+MX:IF I<O THEN READ RF(2,I),RF(1,I) ELSE RF(2,I)=256:RF(1,I)=256:GOTO 570
560 A$="":FOR J=0 TO 31:READ K:A$=A$+CHR$(K):NEXT J:SPRITE$(V)=A$:V=V+1
570 NEXT I

599 IF V>64 THEN EM$="Too many hw sprites":GOTO 3000

700 'DEFINE MOVES
700 AL=-1:AR=-1:DIM AS(1,2)
710 'HIGH ATTACK
710 AS(0,0)=1:AS(0,1)=0:AS(0,2)=2

998 REM GRAB BACKGROUND INTO BUFFER
998 _VRMMEM(BASE(12)+(24-R)*256,MB,R*256):_MEMCPY(MB,MB+R*256,R*256)
999 _SPRENABLE (SA,SU,0,MX*2):V=1:I=0
1000 'DRAW LEFT CHARACTER
1000 N=LS*2:_BLIT(X1+XO(N),YO(N),L(N),L(N)+S(N),W(N),H(N),MB,32)
1010 'DRAW RIGHT CHARACTER
1010 M=RS*2+1:_BLIT(X2+XO(M),YO(M),L(M),L(M)+S(M),W(M),H(M),MB,32)
1020 'SET PATTERNS 
1020 O=P(N):K=P(M):FOR J=0 TO MX-1:SA(2,J)=O+J:SA(2,J+MX)=K+J:NEXT
1030 'MOVE LEFT CHARACTER SPRITE GROUP 
1030 J=X1+XO(N):K=Y+YO(N)+64:ON LS+1 GOTO 1040,1050,1060,1070,1080,1090
1040 _SPRGRPMOV(J,K,MX,LA):GOTO 1500
1050 _SPRGRPMOV(J,K,MX,LB):GOTO 1500
1060 _SPRGRPMOV(J,K,MX,LC):GOTO 1500
1070 _SPRGRPMOV(J,K,MX,LD):GOTO 1500
1080 _SPRGRPMOV(J,K,MX,LE):GOTO 1500
1090 _SPRGRPMOV(J,K,MX,LF)

1500 'MOVE RIGHT CHARACTER SPRITE GROUP 
1500 J=X2+XO(M):K=Y+YO(M)+64:ON RS+1 GOTO 1510,1520,1530,1540,1550,1560
1510 _SPRGRPMOV(J,K,MX,RA):GOTO 2000
1520 _SPRGRPMOV(J,K,MX,RB):GOTO 2000
1530 _SPRGRPMOV(J,K,MX,RC):GOTO 2000
1540 _SPRGRPMOV(J,K,MX,RD):GOTO 2000
1550 _SPRGRPMOV(J,K,MX,RE):GOTO 2000
1560 _SPRGRPMOV(J,K,MX,RF)

2000 'COPY BUFFER TO VRAM AND RESET DRAWING BUFFER
2000 O=R*256:_MEMVRM(MB,BASE(12)+(24-R)*256,O,2):_MEMCPY(MB+O,MB,O)
2010 I=(I+1) MOD 3:IF I=0 THEN LS=(LS+1)MOD6
2020 IF AR=-1 GOTO 2050
2030 AR=AR+1:IF AR>2 THEN AR=-1:GOTO 2500
2040 RS=AS(0,AR):X2=X2-DX:GOTO 2410
2050 IF STRIG(0)=-1 THEN AR=0:RS=AS(0,0):GOTO 2500
2060 ON STICK(0) GOTO 2120,2500,2100,2500,2500,2500,2110,2500
2070 'NO ACTION
2070 RS=4:GOTO 2500

2100 'GO RIGHT
2100 X2=X2+DX:GOTO 2400
2110 'GO LEFT
2110 X2=X2-DX:GOTO 2400
2120 'BLOCK HIGH
2120 RS=3:GOTO 2500

2400 'VERIFY WE ARE IN BOUNDS
2400 IF X2>167 THEN X2=167:GOTO 2500
2410 IF X2-X1<12 THEN X2=X1+12

2500 'ENEMY PLAYER MOVEMENT
2500 IF X2-X1>20 THEN X1=X1+DX
2510 GOTO 1000

3000 'EXIT FUNCTION
3000 _SPRDISABLE:COLOR 15,4,4:SCREEN 0:PRINT EM$

9000 REM META DATA ABOUT SWORD STANCES
9000 REM TOTAL NUMBER OF STANCES TO LOAD
9000 DATA 12
9010 REM STANCE 1L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9010 DATA 10,8,0,24,SWORD1L.BIN
9020 REM STANCE 1R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9020 DATA 10,8,0,24,SWORD1R.BIN
9030 REM STANCE 2L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9030 DATA 5,11,0,0,SWORD2L.BIN
9040 REM STANCE 2R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9040 DATA 5,11,40,0,SWORD2R.BIN
9050 REM STANCE 3L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9050 DATA 10,8,0,24,SWORD3L.BIN
9060 REM STANCE 3R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9060 DATA 10,8,0,24,SWORD3R.BIN
9070 REM STANCE 4L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9070 DATA 8,9,0,16,SWORD4L.BIN
9080 REM STANCE 4R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9080 DATA 8,9,17,16,SWORD4R.BIN
9090 REM STANCE 5L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9090 DATA 9,8,0,24,SWORD5L.BIN
9100 REM STANCE 5R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9100 DATA 9,8,15,24,SWORD5R.BIN
9110 REM STANCE 6L WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9110 DATA 11,8,0,24,SWORD6L.BIN
9120 REM STANCE 6R WIDTH, HEIGHT IN CHARACTERS, X OFFSET, Y OFFSET AND FILE NAME
9120 DATA 11,8,15,24,SWORD6R.BIN

10000 REM SWORD 1L NUMBER OF PATTERNS, (Y,X) OFFSET AND PATTERN DATA
10000 DATA 4
10001 DATA 23,0,0,0,0,0,2,47,93,255,127,62,31,126,56,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0
10002 DATA 21,16,0,224,240,248,120,124,62,31,15,3,0,0,0,0,0,0,64,96,96,48,120,60,0,252,252,252,0,0,0,0,0,0
10003 DATA 10,32,0,0,8,8,28,28,30,31,63,63,62,60,124,120,240,48,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,0
10004 DATA 26,32,0,0,0,0,4,28,62,254,127,63,31,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,128,0,0

10100 REM SWORD 1R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10100 DATA 4
10101 DATA 48,0,0,0,0,0,32,120,93,122,253,30,124,63,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10102 DATA 45,16,8,24,24,48,120,240,1,255,255,255,0,0,0,0,0,0,0,28,60,124,120,248,240,192,128,0,0,0,0,0,0,0
10103 DATA 45,32,0,0,0,0,16,28,62,63,127,126,252,240,240,192,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0
10104 DATA 61,32,0,0,8,8,28,28,60,252,254,126,62,30,31,15,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0

10200 REM SWORD 2L NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10200 DATA 3
10201 DATA 21,24,6,6,0,12,93,45,27,123,115,207,30,124,120,112,0,0,0,0,192,192,192,192,192,128,128,0,0,0,0,0,0,0
10202 DATA 12,60,96,252,254,252,252,252,248,248,240,224,0,0,0,0,0,0,1,15,7,7,7,3,1,0,0,0,0,0,0,0,0,0
10203 DATA 28,60,224,224,240,240,240,240,240,248,120,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

10300 REM SWORD 2R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10300 DATA 3
10301 DATA 9,24,24,24,192,204,238,237,246,119,115,60,30,15,7,3,0,0,0,0,0,0,128,0,0,128,128,192,0,128,128,128,0,0
10302 DATA 7,60,60,63,127,127,127,126,124,248,240,0,0,0,0,0,0,0,0,129,3,1,1,1,0,0,0,0,0,0,0,0,0,0
10303 DATA 23,60,48,248,248,248,248,248,248,248,120,56,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

10400 REM SWORD 3L NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10400 DATA 4
10401 DATA 21,0,0,0,0,2,47,93,255,127,62,31,62,28,0,0,48,112,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,128
10402 DATA 22,16,243,249,124,124,31,15,15,7,3,0,0,0,0,0,0,0,128,128,192,96,112,56,156,206,230,244,120,56,16,16,0,0
10403 DATA 10,32,0,0,8,8,28,28,30,31,63,63,62,60,124,120,240,48,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,0
10404 DATA 26,32,0,0,0,0,4,28,62,254,127,63,31,7,7,1,0,0,0,0,0,0,0,0,0,0,0,0,128,128,128,128,0,0

10500 REM SWORD 3R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10500 DATA 4
10501 DATA 50,0,0,0,0,32,120,93,122,253,30,124,62,28,24,0,6,135,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10502 DATA 43,16,3,3,6,12,29,57,115,231,207,94,60,56,16,16,0,0,158,62,124,124,240,224,224,192,128,0,0,0,0,0,0,0
10503 DATA 45,32,0,0,0,0,16,28,62,63,127,126,252,240,240,192,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0
10504 DATA 61,32,0,0,8,8,28,28,60,252,254,126,62,30,31,15,7,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0

10600 REM SWORD 4L NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10600 DATA 6
10601 DATA 16,6,0,15,127,254,248,224,224,226,240,242,112,121,63,63,63,63,128,128,128,0,0,29,185,125,252,114,254,60,8,7,3,1
10602 DATA 32,6,0,0,0,0,0,192,192,192,224,224,240,248,120,120,124,188,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10603 DATA 19,22,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,14,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10604 DATA 35,22,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10605 DATA 10,41,0,0,120,124,126,126,126,252,248,248,240,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0
10606 DATA 26,41,24,60,124,254,254,255,127,63,15,4,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,0

10700 REM SWORD 4R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10700 DATA 5
10701 DATA 26,6,0,0,0,0,0,0,14,14,28,29,61,124,120,123,250,244,4,15,7,1,128,242,116,248,252,56,240,192,1,1,1,0
10702 DATA 42,6,0,192,248,252,124,28,28,28,60,60,56,120,240,240,240,224,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10703 DATA 26,22,236,28,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
10704 DATA 29,41,12,30,31,63,63,127,127,254,248,16,0,0,0,0,0,0,0,0,0,128,192,128,0,0,0,0,0,0,0,0,0,0
10705 DATA 47,41,0,0,60,124,252,252,252,126,62,62,30,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

10800 REM SWORD 5L NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10800 DATA 5
10801 DATA 9,3,0,0,0,0,0,0,0,0,3,15,3,252,255,127,63,0,0,0,0,0,0,0,1,64,224,240,248,24,128,128,0,0
10802 DATA 25,3,6,31,45,95,191,220,191,254,56,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,0,0,0,0,0,0,0,0
10803 DATA 28,19,31,15,231,251,125,126,62,14,0,0,0,0,0,0,0,0,128,128,128,128,0,0,0,0,0,0,0,0,0,0,0,0
10804 DATA 13,35,0,32,48,60,63,126,124,252,248,240,240,240,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,0,0,0,0,0
10805 DATA 29,35,4,28,126,254,255,127,31,15,7,7,0,0,0,0,0,0,0,0,0,0,0,128,128,192,192,192,0,0,0,0,0,0

10900 REM SWORD 5R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
10900 DATA 5
10901 DATA 38,3,48,124,90,125,254,29,126,63,14,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,1,3,7,12,0,1,0,0
10902 DATA 54,3,0,0,0,0,0,0,0,0,224,248,224,31,255,255,126,0,0,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0
10903 DATA 35,20,249,243,239,95,63,62,56,0,0,0,0,0,0,0,0,16,0,192,128,0,0,0,0,0,0,0,0,0,0,0,0,0
10904 DATA 34,36,14,31,31,63,127,127,124,248,248,0,0,0,0,0,0,0,0,128,240,192,128,0,0,0,0,0,0,0,0,0,0,0
10905 DATA 52,36,4,12,60,252,126,62,62,31,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

11000 REM SWORD 6L NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
11000 DATA 5
11001 DATA 26,3,14,26,62,95,188,126,188,120,48,0,0,0,252,254,255,63,0,0,0,0,0,0,0,0,0,0,128,248,255,0,255,255
11002 DATA 42,3,0,0,0,0,0,0,0,0,0,0,0,0,240,0,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11003 DATA 33,19,254,0,0,0,0,0,0,0,0,0,0,0,0,0,128,128,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11004 DATA 12,35,32,32,48,120,127,126,126,124,120,120,112,240,96,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11005 DATA 28,35,30,63,127,255,63,31,15,3,1,1,0,0,0,0,0,0,0,0,0,128,128,192,192,192,224,224,96,0,0,0,0,0

11100 REM SWORD 6R NUMBER OF PATTERNS, OFFSET AND PATTERN DATA
11100 DATA 5
11101 DATA 42,3,0,0,0,0,0,0,0,0,0,0,0,1,255,0,31,31,7,5,7,15,3,7,3,1,0,0,16,240,243,7,255,255
11102 DATA 58,3,0,128,192,160,208,224,208,224,192,0,0,0,240,240,240,192,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11103 DATA 48,19,254,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
11104 DATA 49,35,15,31,31,63,63,127,126,120,240,240,192,0,0,0,0,0,0,128,192,224,128,0,0,0,0,0,0,0,0,0,0,0
11105 DATA 68,35,4,4,12,30,254,126,126,62,30,30,14,15,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0

30000 REM WINDOW BORDERS
30000 DATA TOP LEFT
30000 DATA 0,&B01111111,&B01111111,&B01100000,&B01100000,&B01100111,&B01100100,&B01100100
30010 REM TOP LINE
30010 DATA 0,255,255,0,0,255,0,0
30020 REM TOP RIGHT
30020 DATA 0,&B11111110,&B11111110,&B00000110,&B00000110,&B11100110,&B00100110,&B00100110
30030 REM LEFT SIDE
30030 DATA &B01100100,&B01100100,&B01100100,&B01100100,&B01100100,&B01100100,&B01100100,&B01100100
30040 REM RIGHT SIDE
30040 DATA &B00100110,&B00100110,&B00100110,&B00100110,&B00100110,&B00100110,&B00100110,&B00100110
30050 REM BOTTOM LEFT
30050 DATA &B01100100,&B01100100,&B01100111,&B01100000,&B01100000,&B01111111,&B01111111,0
30060 REM BOTTOM LINE
30060 DATA 0,0,255,0,0,255,255,0
30070 REM BOTTOM RIGHT
30070 DATA &B00100110,&B00100110,&B11100110,&B00000110,&B00000110,&B11111110,&B11111110,0