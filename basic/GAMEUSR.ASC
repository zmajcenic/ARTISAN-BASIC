1 REM GAME USING DEFUSR CALL INTO EXTENSION
2 DEFINT A-Z
3 REM DEFUSR STUFF
3 DIM ZZ(13):DIM JR(2)
4 REM RST #30, SLOT ID
4 JR(0)=&HF7:POKE VARPTR(JR(0))+1,PEEK(&HF342)
5 REM ADDRESS
5 JR(1)=&H4014
6 REM EI, RET
6 JR(2)=&HC9FB
7 O=0:MB=0:A=0:A$=""
8 _ARTINFO(A,O,MB)
9 IF (O AND 2048)=0 THEN PRINT "Incorrect ARTISAN basic variant loaded.":END
10 GOTO 1000

15 _TURBO ON (I,X,J,Y,VY,PL(),K,F,AC,ZZ(),A,PG(),AR(),AL(),SU,CD(),KY,SA(),O,JB,MB)
16  ON STRIG GOSUB 250:STRIG(0) ON

20 REM GAME LOGIC
20 '#I &H76
25 I=(X+4)\8:J=Y\128+(Y<0):IF J<-2 OR VY<0 GOTO 50
30 IF VY>0 GOTO 40 ELSE IF PL(J+2,I)>0 OR PL(J+2,I+1)>0 GOTO 60
40 K=(Y+VY)\128:IF K=J GOTO 50 ELSE IF PL(K+2,I)>0 OR PL(K+2,I+1)>0 THEN VY=0:F=0:Y=K*128:GOTO 60 
50 Y=Y+VY:VY=VY+AC

60 ON STICK(0)+1 GOTO 110,110,70,70,70,110,90,90,90
70 X=X+2+(VY<>0):IF X>240 THEN X=240
80 REM _SGAM(X,Y\16,2,PG,2,AR)
80 ZZ(0)=5:ZZ(1)=X:ZZ(2)=Y\16:ZZ(3)=2:ZZ(4)=VARPTR(PG(0,0)):ZZ(5)=2:ZZ(6)=VARPTR(AR(0)):O=USR(VARPTR(ZZ(0))):GOTO 120
90 X=X-2-(VY<>0):IF X<0 THEN X=0
100 REM _SGAM(X,Y\16,2,PG,2,AL)
100 ZZ(0)=5:ZZ(1)=X:ZZ(2)=Y\16:ZZ(3)=2:ZZ(4)=VARPTR(PG(0,0)):ZZ(5)=2:ZZ(6)=VARPTR(AL(0)):O=USR(VARPTR(ZZ(0))):GOTO 120
110 REM _SPRGRPMOV(X,Y\16,2,PG)
110 ZZ(0)=6:ZZ(1)=X:ZZ(2)=Y\16:ZZ(3)=2:ZZ(4)=VARPTR(PG(0,0)):O=USR(VARPTR(ZZ(0)))
111 SU=1

120 REM _COLL(A,X+4,Y\16,7,15,11,CD)
120 ZZ(0)=7:ZZ(1)=VARPTR(A):ZZ(2)=X+4:ZZ(3)=Y\16:ZZ(4)=7:ZZ(5)=15:ZZ(6)=11:ZZ(7)=VARPTR(CD(0,0)):O=USR(VARPTR(ZZ(0))):IF A=-1 GOTO 20
130 REM FIRST 5 OBJECTS ARE KEYS, REST ARE CRITTERS
130 IF A>=5 GOTO 200 
140 KY=KY-1:CD(0,A)=0
150 REM _ANIMSTOP(24+A)
150 ZZ(0)=13:ZZ(1)=24+A:O=USR(VARPTR(ZZ(0)))
160 SA(0,14+A)=256:SA(0,19+A)=256
170 REM _SNDSFX(4,2,0)
170 ZZ(0)=8:ZZ(1)=4:ZZ(2)=2:ZZ(3)=0:O=USR(VARPTR(ZZ(0)))
180 GOSUB 300
190 IF KY>0 GOTO 20 ELSE GOTO 390
200 COLOR ,,INT(RND(1)*15)+1
210 REM _SNDSFX(5,2,0)
210 ZZ(0)=8:ZZ(1)=5:ZZ(2)=2:ZZ(3)=0:O=USR(VARPTR(ZZ(0)))
220 GOTO 20

250 REM STRIG(0) SUBROUTINE
250 IF F<>0 THEN RETURN
260 F=1:VY=-55
270 REM _SNDSFX(2,2,0)
270 ZZ(0)=8:ZZ(1)=2:ZZ(2)=2:ZZ(3)=0:O=USR(VARPTR(ZZ(0)))
280 RETURN

300 REM JAILBARS LOWERING ROUTINE
300 REM SPRDISABLE
300 ZZ(0)=1:O=USR(VARPTR(ZZ(0)))
310 FOR I=1 TO 16
320 REM RESET DRAWING BUFFER
320 REM MEMCPY
320 ZZ(0)=2:ZZ(1)=MB:ZZ(2)=&H1EC0:ZZ(3)=3072:O=USR(VARPTR(ZZ(0)))
330 REM DRAW JAIL
330 JB=JB+1
340 REM BLIT(20,JB,&H17E0,&H1B50,10,11,&H1EC0,32)
340 ZZ(0)=4:ZZ(1)=20:ZZ(2)=JB:ZZ(3)=&H17E0:ZZ(4)=&H1B50:ZZ(5)=10:ZZ(6)=11:ZZ(7)=&H1EC0:ZZ(8)=32:O=USR(VARPTR(ZZ(0)))
350 REM DISPLAY ON SCREEN
350 REM MEMVRM(&H1EC0,BASE(12)+2816,3072,0)
350 ZZ(0)=3:ZZ(1)=&H1EC0:ZZ(2)=2816:ZZ(3)=3072:ZZ(4)=0:O=USR(VARPTR(ZZ(0)))
360 NEXT I
370 REM SPRENABLE
370 ZZ(0)=0:ZZ(1)=VARPTR(SA(0,0)):ZZ(2)=VARPTR(SU):ZZ(3)=1:ZZ(4)=24:O=USR(VARPTR(ZZ(0)))
380 RETURN

390 STRIG(0) OFF
395 _TURBO OFF

400 REM END SEQUENCE
400 REM _MAXAUTOSGAMS(0)
400 ZZ(0)=20:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
401 REM _MAXANIMSPRS(0)
401 ZZ(0)=19:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
402 REM _MAXANIMDEFS(0)
402 ZZ(0)=18:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
403 REM _MAXANIMITEMS(0)
403 ZZ(0)=17:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
410 REM HIDE ALL SPRITES
410 FOR I=0 TO 31:SA(0,I)=256:NEXT:SU=1
420 REM WAIT FOR SPRITES TO BE UPDATED IN VRAM
420 IF SU=1 GOTO 420 
425 REM _SPRDISABLE
425 ZZ(0)=1:O=USR(VARPTR(ZZ(0)))
430 REM REDRAW KNIGHT WITHOUT JAILBARS
430 REM _MEMVRM(MB,BASE(12)+11*256,12*256,0)
430 ZZ(0)=3:ZZ(1)=MB:ZZ(2)=BASE(12)+11*256:ZZ(3)=12*256:ZZ(4)=0:O=USR(VARPTR(ZZ(0)))
440 REM REMOVE PLATFORMS IN FIRST SCREEN THIRD
440 A=BASE(10):FOR I=0 TO 255:VPOKE A+I,I:NEXT
450 REM RESTORE ORIGINAL 255th CHARACTER PATTERN AND COLOR
450 RESTORE 55000:A=BASE(11)+2040:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
460 A=BASE(12)+2040:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
470 REM REMOVE PLATFORMS IN SECOND SCREEN THIRD
470 A=BASE(10)+256:FOR I=0 TO 255:VPOKE A+I,I:NEXT
480 REM RESTORE ORIGINAL 511th CHARACTER PATTERN AND COLOR
480 A=BASE(11)+4088:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
490 A=BASE(12)+4088:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
500 REM REMOVE PLATFORMS IN THIRD SCREEN THIRD
500 A=BASE(10)+512:FOR I=0 TO 255:VPOKE A+I,I:NEXT
510 REM RESTORE ORIGINAL 767th CHARACTER PATTERN AND COLOR
510 A=BASE(11)+6136:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
520 A=BASE(12)+6136:FOR I=0 TO 7:READ X:VPOKE A+I,X:NEXT
530 REM PLACE PLAYER FACING LEFT AND SPECIFIC LOCATION
530 REM_SPRENABLE(SA,SU,1,24)
530 ZZ(0)=0:ZZ(1)=VARPTR(SA(0,0)):ZZ(2)=VARPTR(SU):ZZ(3)=1:ZZ(4)=24:O=USR(VARPTR(ZZ(0)))
535 SA(2,0)=10:SA(2,1)=11
540 REM _SPRGRPMOV(90,155,2,PG)
540 ZZ(0)=6:ZZ(1)=90:ZZ(2)=155:ZZ(3)=2:ZZ(4)=VARPTR(PG(0,0)):O=USR(VARPTR(ZZ(0)))
545 SU=1
550 REM RESET DRAWING BUFFER
550 REM _MEMCPY(MB,&H1EC0,12*256)
550 ZZ(0)=2:ZZ(1)=MB:ZZ(2)=&H1EC0:ZZ(3)=12*256:O=USR(VARPTR(ZZ(0)))
560 REM DRAW END TEXT LETTER BY LETTER
560 A$="THANK YOU KIND SIR":J=-1:X=100:Y=7:GOSUB 4000
570 A$="WITHOUT YOU MY MISSION":X=100:Y=37:GOSUB 4000
580 A$="WAS DOOMED TO FAILURE":X=100:Y=47:GOSUB 4000
590 DEFUSR1=&H156:A=USR1(0)
600 A$=INKEY$:IF A$="" GOTO 600

700 REM ERROR AND CTRL-STOP HANDLER
700 REM _MAXAUTOSGAMS(0)
700 ZZ(0)=20:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
701 REM _MAXANIMSPRS(0)
701 ZZ(0)=19:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
702 REM _MAXANIMDEFS(0)
702 ZZ(0)=18:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
703 REM _MAXANIMITEMS(0)
703 ZZ(0)=17:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
710 REM _SPRDISABLE
710 ZZ(0)=1:O=USR(VARPTR(ZZ(0)))
720 REM _SNDPLYOFF
720 ZZ(0)=33:O=USR(VARPTR(ZZ(0)))
730 SCREEN 0:WIDTH 40
740 PRINT "I hope you enjoyed ARTISAN BASIC demo"
750 PRINT "Now dig in into listing and docs :)"
760 END

1000 REM INITIALIZATION
1000 REM _SPRDISABLE
1000 ZZ(0)=1:DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
1010 REM _MAXAUTOSGAMS(0)
1010 ZZ(0)=20:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
1011 REM _MAXANIMSPRS(0)
1011 ZZ(0)=19:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
1012 REM _MAXANIMDEFS(0)
1012 ZZ(0)=18:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
1013 REM _MAXANIMITEMS(0)
1013 ZZ(0)=17:ZZ(1)=0:O=USR(VARPTR(ZZ(0)))
1020 REM _MAXANIMITEMS(54)
1020 ZZ(0)=17:ZZ(1)=54:O=USR(VARPTR(ZZ(0)))
1021 REM _MAXANIMDEFS(16)
1021 ZZ(0)=18:ZZ(1)=16:O=USR(VARPTR(ZZ(0)))
1022 REM _MAXANIMSPRS(32)
1022 ZZ(0)=19:ZZ(1)=32:O=USR(VARPTR(ZZ(0)))
1023 REM _MAXAUTOSGAMS(6)
1023 ZZ(0)=20:ZZ(1)=6:O=USR(VARPTR(ZZ(0)))
1035 REM _MEMCPY(&H4010,VARPTR(MB),2)
1035 ZZ(0)=2:ZZ(1)=&H4010:ZZ(2)=VARPTR(MB):ZZ(3)=2:O=USR(VARPTR(ZZ(0)))
1040 PRINT "Loading music"
1050 BLOAD "GAMEMUS.BIN",&HC000
1051 REM _MEMCPY(&HC000,&H100,1608)
1051 ZZ(0)=2:ZZ(1)=&HC000:ZZ(2)=&H100:ZZ(3)=1608:O=USR(VARPTR(ZZ(0)))
1060 PRINT "Loading SFX"
1070 BLOAD "SFX.BIN"
1071 REM _MEMCPY(&HC007,&H1000,218)
1071 ZZ(0)=2:ZZ(1)=&HC007:ZZ(2)=&H1000:ZZ(3)=218:O=USR(VARPTR(ZZ(0)))
1080 REM _SNDPLYINI(&H100,&H1000)
1080 ZZ(0)=31:ZZ(1)=&H100:ZZ(2)=&H1000:O=USR(VARPTR(ZZ(0)))
1090 PRINT "Loading graphics elements"
1100 BLOAD"KNIGHT2.BIN",&HC000
1101 REM _MEMCPY(&HC000,&H1100,2*11*10*8)
1101 ZZ(0)=2:ZZ(1)=&HC000:ZZ(2)=&H1100:ZZ(3)=2*11*10*8:O=USR(VARPTR(ZZ(0)))
1110 BLOAD"JAIL.BIN",&HC000
1111 REM _MEMCPY(&HC000,&H17E0,2*11*10*8)
1111 ZZ(0)=2:ZZ(1)=&HC000:ZZ(2)=&H17E0:ZZ(3)=2*11*10*8:O=USR(VARPTR(ZZ(0)))
1115 REM DLOAD("FONT.RAW",0,&H3E60,26*16)
1115 A$="FONT.RAW":ZZ(0)=40:ZZ(1)=VARPTR(A$):ZZ(2)=0:ZZ(3)=&H3E60:ZZ(4)=26*16:O=USR(VARPTR(ZZ(0)))
1120 PRINT "Initializing data"
1130 A=0:I=0:J=0:K=0:EX=0:EY=0:JB=0:KY=5
1140 REM BASIC SPRITE SUBSYSTEM VARIABLES
1140 SU=0:DIM SA(3,31):DIM AD(14)
1141 REM _FILRAM(VARPTR(SA(0,0)),256,1)
1141 ZZ(0)=30:ZZ(1)=VARPTR(SA(0,0)):ZZ(2)=256:ZZ(3)=1:DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
1150 REM PLAYER VARIABLES
1150 DIM PG(2,1):DIM AR(1):DIM AL(1):X=0:Y=0:VY=0:AC=0:F=0
1160 REM FOX 1 VARIABLES
1160 FX=0:FY=0:DIM FG(2,1):DIM FR(1):DIM FL(1)
1170 REM FOX 2 VARIABLES
1170 GX=0:GY=0:DIM GG(2,1):DIM GR(1):DIM GL(1)
1180 REM SNAKE 1 VARIABLES
1180 SX=0:SY=0:DIM SG(2,1):DIM SR(1):DIM SL(1)
1190 REM SNAKE 2 VARIABLES
1190 TX=0:TY=0:DIM TG(2,1):DIM TR(1):DIM TL(1)
1200 REM BAT 1 VARIABLES
1200 BX=0:BY=0:DIM BG(2,1):DIM BU(1)
1210 REM BAT 2 VARIABLES
1210 CX=0:CY=0:DIM CG(2,1):DIM CU(1)
1220 REM PLATFORM LOCATIONS
1220 DIM PL(24,31)
1230 REM COLLISION DETECTION
1230 DIM CD(7,10)

1500 REM PLATFORM
1500 RESTORE 30000:FOR I=0 TO 15:READ A:POKE &HC800+I,A:NEXT
1501 REM _MEMCPY(&HC800,&H7FF0,16)
1501 ZZ(0)=2:ZZ(1)=&HC800:ZZ(2)=&H7FF0:ZZ(3)=16:DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
1510 REM DEFINE SPRITE GROUP FOR PLAYER
1510 PG(0,0)=0:PG(1,0)=0:PG(2,0)=0
1530 PG(0,1)=1:PG(1,1)=0:PG(2,1)=0
1540 REM DEFINE SPRITE GROUP FOR FOX 1
1540 FG(0,0)=2:FG(1,0)=0:FG(2,0)=0:FG(0,1)=3:FG(1,1)=0:FG(2,1)=0
1550 REM DEFINE SPRITE GROUP FOR FOX 2
1550 GG(0,0)=4:GG(1,0)=0:GG(2,0)=0:GG(0,1)=5:GG(1,1)=0:GG(2,1)=0
1560 REM DEFINE SPRITE GROUP FOR SNAKE 1
1560 SG(0,0)=6:SG(1,0)=0:SG(2,0)=0:SG(0,1)=7:SG(1,1)=0:SG(2,1)=0
1570 REM DEFINE SPRITE GROUP FOR SNAKE 2
1570 TG(0,0)=8:TG(1,0)=0:TG(2,0)=0:TG(0,1)=9:TG(1,1)=0:TG(2,1)=0
1580 REM DEFINE SPRITE GROUP FOR BAT 1
1580 BG(0,0)=10:BG(1,0)=0:BG(2,0)=0:BG(0,1)=11:BG(1,1)=0:BG(2,1)=0
1590 REM DEFINE SPRITE GROUP FOR BAT 2
1590 CG(0,0)=12:CG(1,0)=0:CG(2,0)=0:CG(0,1)=13:CG(1,1)=0:CG(2,1)=0
1600 REM DEFINE ANIMATION ITEMS - PATTERN AND COLOR CHANGES FOR SPRITES
1600 RESTORE 50000:READ A:FOR I=0 TO A-1:FOR J=0 TO 2:READ AD(J):NEXT J
1601 REM _ANIMITEMPAT(I,AD(0),AD(1),AD(2))
1601 ZZ(0)=21:ZZ(1)=I:ZZ(2)=AD(0):ZZ(3)=AD(1):ZZ(4)=AD(2):O=USR(VARPTR(ZZ(0)))
1602 NEXT I
1610 REM DEFINE ANIMATION ITEMS - PATTERN DEFINITION CHANGES
1610 READ K:FOR I=A TO A+K-1:FOR J=0 TO 1:READ AD(J):NEXT J
1611 REM _ANIMITEMPTR(I,AD(0),AD(1))
1611 ZZ(0)=22:ZZ(1)=I:ZZ(2)=AD(0):ZZ(3)=AD(1):O=USR(VARPTR(ZZ(0)))
1612 NEXT I
1620 REM DEFINE ANIMATIONS
1620 READ A:FOR I=0 TO A-1:READ K:FOR J=0 TO K-1:READ AD(J):NEXT J
1621 REM _ANIMDEF(I,K,AD)
1621 ZZ(0)=23:ZZ(1)=I:ZZ(2)=K:ZZ(3)=VARPTR(AD(0)):O=USR(VARPTR(ZZ(0)))
1622 NEXT I
1630 REM DEFINE SPRITE ANIMATIONS
1630 READ A:FOR I=0 TO A-1:FOR J=0 TO 2:READ AD(J):NEXT J
1631 REM _ANIMSPRITE(I,AD(0),AD(1),AD(2))
1631 ZZ(0)=24:ZZ(1)=I:ZZ(2)=AD(0):ZZ(3)=AD(1):ZZ(4)=AD(2):O=USR(VARPTR(ZZ(0)))
1632 NEXT I
1640 REM DEFINE CHARACTER ANIMATIONS
1640 READ K:FOR I=A TO A+K-1:FOR J=0 TO 2:READ AD(J):NEXT J
1641 REM _ANIMCHAR(I,AD(0),AD(1),AD(2))
1641 ZZ(0)=25:ZZ(1)=I:ZZ(2)=AD(0):ZZ(3)=AD(1):ZZ(4)=AD(2):O=USR(VARPTR(ZZ(0)))
1642 NEXT I
1650 FOR I=0 TO 31:SA (0,I)=256:PL(24,I)=1:NEXT
1660 FX=200:FY=176:GX=112:GY=56:SX=56:SY=25:TX=96:TY=105:BX=40:BY=0:CX=220:CY=120
1670 X=0:Y=0:AC=4:VY=0
1680 REM INITIAL PATTERNS AND COLORS OF PLAYER SPRITES
1680 SA(2,0)=0:SA(3,0)=1
1690 SA(2,1)=1:SA(3,1)=15
1700 REM INITIAL PATTERNS AND COLORS OF FOX 1
1700 SA(2,2)=12:SA(3,2)=1
1710 SA(2,3)=15:SA(3,3)=11
1720 REM INITIAL PATTERNS AND COLORS OF FOX 2
1720 SA(2,4)=12:SA(3,4)=1
1730 SA(2,5)=15:SA(3,5)=11
1740 REM INITIAL PATTERNS AND COLORS OF SNAKE 1
1740 SA(2,6)=24:SA(3,6)=1
1750 SA(2,7)=25:SA(3,7)=13
1760 REM INITIAL PATTERNS AND COLORS OF SNAKE 2
1760 SA(2,8)=24:SA(3,8)=1
1770 SA(2,9)=25:SA(3,9)=13
1780 REM INITIAL PATTERNS AND COLORS OF BAT 1
1780 SA(2,10)=32:SA(3,10)=1
1790 SA(2,11)=33:SA(3,11)=4
1800 REM INITIAL PATTERNS AND COLORS OF BAT 2
1800 SA(2,12)=32:SA(3,12)=1
1810 SA(2,13)=33:SA(3,13)=4
1820 REM INITIAL SETUP FOR KEY 1
1820 SA(0,14)=176:SA(1,14)=172:SA(2,14)=39:SA(3,14)=15
1830 SA(0,19)=176:SA(1,19)=172:SA(2,19)=38:SA(3,19)=1
1840 REM INITIAL SETUP FOR KEY 2
1840 SA(0,15)=4:SA(1,15)=4:SA(2,15)=39:SA(3,15)=15
1850 SA(0,20)=4:SA(1,20)=4:SA(2,20)=38:SA(3,20)=1
1860 REM INITIAL SETUP FOR KEY 3
1860 SA(0,16)=42:SA(1,16)=240:SA(2,16)=39:SA(3,16)=15
1870 SA(0,21)=42:SA(1,21)=240:SA(2,21)=38:SA(3,21)=1
1880 REM INITIAL SETUP FOR KEY 4
1880 SA(0,17)=96:SA(1,17)=40:SA(2,17)=39:SA(3,17)=15
1890 SA(0,22)=96:SA(1,22)=40:SA(2,22)=38:SA(3,22)=1
1900 REM INITIAL SETUP FOR KEY 5
1900 SA(0,18)=130:SA(1,18)=100:SA(2,18)=39:SA(3,18)=15
1910 SA(0,23)=130:SA(1,23)=100:SA(2,23)=38:SA(3,23)=1
1920 REM COLLISION DETECTION SETUP
1920 REM ACTIVE FLAG, UPPER LEFT X / SPRITE ID, UPPER LEFT Y / NOT USED
1920 REM START OFFSET X, START OFFSET Y, WIDTH, HEIGHT, TYPE 0=GENERIC / <>0 = SPRITE
1920 CD(0,0)=1:CD(1,0)=14:CD(3,0)=0:CD(4,0)=0:CD(5,0)=13:CD(6,0)=12:CD(7,0)=1
1930 CD(0,1)=1:CD(1,1)=15:CD(3,1)=0:CD(4,1)=0:CD(5,1)=13:CD(6,1)=12:CD(7,1)=1
1940 CD(0,2)=1:CD(1,2)=16:CD(3,2)=0:CD(4,2)=0:CD(5,2)=13:CD(6,2)=12:CD(7,2)=1
1950 CD(0,3)=1:CD(1,3)=17:CD(3,3)=0:CD(4,3)=0:CD(5,3)=13:CD(6,3)=12:CD(7,3)=1
1960 CD(0,4)=1:CD(1,4)=18:CD(3,4)=0:CD(4,4)=0:CD(5,4)=13:CD(6,4)=12:CD(7,4)=1
1970 REM CRITTERS
1970 REM FOXES
1970 CD(0,5)=1:CD(1,5)=2:CD(3,5)=0:CD(4,5)=8:CD(5,5)=15:CD(6,5)=7:CD(7,5)=1
1980 CD(0,6)=1:CD(1,6)=4:CD(3,6)=0:CD(4,6)=8:CD(5,6)=15:CD(6,6)=7:CD(7,6)=1
1990 REM SNAKES
1990 CD(0,7)=1:CD(1,7)=6:CD(3,7)=0:CD(4,7)=6:CD(5,7)=15:CD(6,7)=8:CD(7,7)=1
2000 CD(0,8)=1:CD(1,8)=8:CD(3,8)=0:CD(4,8)=6:CD(5,8)=15:CD(6,8)=8:CD(7,8)=1
2010 REM BATS
2010 CD(0,9)=1:CD(1,9)=10:CD(3,9)=0:CD(4,9)=2:CD(5,9)=14:CD(6,9)=14:CD(7,9)=1
2020 CD(0,10)=1:CD(1,10)=12:CD(3,10)=0:CD(4,10)=2:CD(5,10)=14:CD(6,10)=14:CD(7,10)=1

2130 REM ANIMATION GROUPS
2130 REM PLAYER 
2130 AR(0)=0:AR(1)=1:AL(0)=2:AL(1)=3
2140 REM FOX 1
2140 FR(0)=4:FR(1)=5:FL(0)=6:FL(1)=7
2150 REM FOX 2
2150 GR(0)=8:GR(1)=9:GL(0)=10:GL(1)=11
2160 REM SNAKE 1
2160 SR(0)=12:SR(1)=13:SL(0)=14:SL(1)=15
2170 REM SNAKE 2
2170 TR(0)=16:TR(1)=17:TL(0)=18:TL(1)=19
2180 REM BAT 1
2180 BU(0)=20:BU(1)=21
2190 REM BAT 2
2190 CU(0)=22:CU(1)=23

2200 REM AUTO SPRITE GROUP ANIMATE AND MOVE
2200 REM ID, X LOCATION VARIABLE, Y LOCATION VARIABLE
2200 REM MINIMUM, MAXIMUM, DELTA, DIRECTION (0=X, <>0 Y)
2200 REM TICKS BETWEEN CHANGE, SPRITE GROUP SIZE, SPRITE GROUP ARRAY
2200 REM ANIMATION LIST SIZE, ANIMATION LIST FOR NEGATIVE DIRECTION, ANIMATION LIST FOR POSITIVE DIRECTION
2200 REM _AUTOSGAMDEF(0,FX,FY,0,240,1,0,3,2,FG,2,FL,FR)
2200 ZZ(0)=26:ZZ(1)=0:ZZ(2)=VARPTR(FX):ZZ(3)=VARPTR(FY):ZZ(4)=0:ZZ(5)=240:ZZ(6)=1:ZZ(7)=0:ZZ(8)=3:ZZ(9)=2:ZZ(10)=VARPTR(FG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(FL(0)):ZZ(13)=VARPTR(FR(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2201 REM _AUTOSGAMDEF(1,GX,GY,112,144,1,0,5,2,GG,2,GL,GR)
2201 ZZ(0)=26:ZZ(1)=1:ZZ(2)=VARPTR(GX):ZZ(3)=VARPTR(GY):ZZ(4)=112:ZZ(5)=144:ZZ(6)=1:ZZ(7)=0:ZZ(8)=5:ZZ(9)=2:ZZ(10)=VARPTR(GG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(GL(0)):ZZ(13)=VARPTR(GR(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2210 REM _AUTOSGAMDEF(2,SX,SY,56,96,1,0,5,2,SG,2,SL,SR)
2210 ZZ(0)=26:ZZ(1)=2:ZZ(2)=VARPTR(SX):ZZ(3)=VARPTR(SY):ZZ(4)=56:ZZ(5)=96:ZZ(6)=1:ZZ(7)=0:ZZ(8)=5:ZZ(9)=2:ZZ(10)=VARPTR(SG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(SL(0)):ZZ(13)=VARPTR(SR(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2211 REM _AUTOSGAMDEF(3,TX,TY,96,128,1,0,5,2,TG,2,TL,TR)
2211 ZZ(0)=26:ZZ(1)=3:ZZ(2)=VARPTR(TX):ZZ(3)=VARPTR(TY):ZZ(4)=96:ZZ(5)=128:ZZ(6)=1:ZZ(7)=0:ZZ(8)=5:ZZ(9)=2:ZZ(10)=VARPTR(TG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(TL(0)):ZZ(13)=VARPTR(TR(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2220 REM _AUTOSGAMDEF(4,BX,BY,0,136,1,1,3,2,BG,2,BU,BU)
2220 ZZ(0)=26:ZZ(1)=4:ZZ(2)=VARPTR(BX):ZZ(3)=VARPTR(BY):ZZ(4)=0:ZZ(5)=136:ZZ(6)=1:ZZ(7)=1:ZZ(8)=3:ZZ(9)=2:ZZ(10)=VARPTR(BG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(BU(0)):ZZ(13)=VARPTR(BU(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2221 REM _AUTOSGAMDEF(5,CX,CY,0,160,1,1,3,2,CG,2,CU,CU)
2221 ZZ(0)=26:ZZ(1)=5:ZZ(2)=VARPTR(CX):ZZ(3)=VARPTR(CY):ZZ(4)=0:ZZ(5)=160:ZZ(6)=1:ZZ(7)=1:ZZ(8)=3:ZZ(9)=2:ZZ(10)=VARPTR(CG(0,0)):ZZ(11)=2:ZZ(12)=VARPTR(CU(0)):ZZ(13)=VARPTR(CU(0)):DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))

2250 REM ON STOP GOSUB 400:STOP ON
2260 REM ON ERROR GOTO 400

2370 PRINT "Loading platform data"
2380 REM DLOAD ("LEVEL.BIN",7,VARPTR(PL(0,0)),1600)
2380 A$="LEVEL.BIN":ZZ(0)=40:ZZ(1)=VARPTR(A$):ZZ(2)=7:ZZ(3)=VARPTR(PL(0,0)):ZZ(4)=1600:DEFUSR=VARPTR(JR(0)):O=USR(VARPTR(ZZ(0)))
2390 COLOR 15,1,1:SCREEN 2,2
2400 REM LOAD COMPRESSED SCREEN, _DLOAD("LVL.ZX0",0,MB,5747)
2400 A$="LVL.ZX0":ZZ(0)=40:ZZ(1)=VARPTR(A$):ZZ(2)=0:ZZ(3)=MB:ZZ(4)=5747:O=USR(VARPTR(ZZ(0)))
2405 REM _VUNPACK(MB,0)
2405 ZZ(0)=39:ZZ(1)=MB:ZZ(2)=0:O=USR(VARPTR(ZZ(0)))
2410 REM SAVE SCREEN DATA THAT IS NEEDED LATER
2410 REM _VRMMEM(BASE(12)+11*256,MB,12*256)
2410 ZZ(0)=37:ZZ(1)=BASE(12)+11*256:ZZ(2)=MB:ZZ(3)=12*256:O=USR(VARPTR(ZZ(0)))
2420 REM DRAW KNIGHT IN BUFFER
2420 REM _BLIT(20,3,&H1100,&H1470,10,11,MB,32)
2420 ZZ(0)=4:ZZ(1)=20:ZZ(2)=3:ZZ(3)=&H1100:ZZ(4)=&H1470:ZZ(5)=10:ZZ(6)=11:ZZ(7)=MB:ZZ(8)=32:O=USR(VARPTR(ZZ(0)))
2430 REM SAVE AS BACKGROUND
2430 REM _MEMCPY(MB,&H1EC0,12*256)
2430 ZZ(0)=2:ZZ(1)=MB:ZZ(2)=&H1EC0:ZZ(3)=12*256:O=USR(VARPTR(ZZ(0)))

2440 REM _SNDPLYON
2440 ZZ(0)=32:O=USR(VARPTR(ZZ(0)))

2500 REM INTRO JAILBARS UP
2500 JB=83:FOR I=1 TO 20
2510 REM RESET DRAWING BUFFER
2510 REM _MEMCPY(MB,&H1EC0,12*256)
2510 ZZ(0)=2:ZZ(1)=MB:ZZ(2)=&H1EC0:ZZ(3)=12*256:O=USR(VARPTR(ZZ(0)))
2520 REM DRAW JAIL
2520 JB=JB-4
2521 REM _BLIT(20,JB,&H17E0,&H1B50,10,11,&H1EC0,32)
2521 ZZ(0)=4:ZZ(1)=20:ZZ(2)=JB:ZZ(3)=&H17E0:ZZ(4)=&H1B50:ZZ(5)=10:ZZ(6)=11:ZZ(7)=&H1EC0:ZZ(8)=32:O=USR(VARPTR(ZZ(0)))
2530 REM DISPLAY ON SCREEN
2530 REM _MEMVRM(&H1EC0,BASE(12)+11*256,12*256,0)
2530 ZZ(0)=3:ZZ(1)=&H1EC0:ZZ(2)=BASE(12)+11*256:ZZ(3)=12*256:ZZ(4)=0:O=USR(VARPTR(ZZ(0)))
2540 NEXT
2550 REM CALL FOR HELP AND GET KEYS CRY
2550 A$="HELP":J=50:X=30:Y=9:GOSUB 4000
2560 X=60:Y=24:GOSUB 4000
2570 X=40:Y=35:GOSUB 4000
2580 A$="GET THE KEYS":J=100:X=20:Y=50:GOSUB 4000
2590 REM RESET DRAWING BUFFER
2590 REM _MEMCPY(MB,&H1EC0,12*256)
2590 ZZ(0)=2:ZZ(1)=MB:ZZ(2)=&H1EC0:ZZ(3)=12*256:O=USR(VARPTR(ZZ(0)))
2600 REM DRAW JAIL
2600 REM _BLIT(20,JB,&H17E0,&H1B50,10,11,&H1EC0,32)
2600 ZZ(0)=4:ZZ(1)=20:ZZ(2)=JB:ZZ(3)=&H17E0:ZZ(4)=&H1B50:ZZ(5)=10:ZZ(6)=11:ZZ(7)=&H1EC0:ZZ(8)=32:O=USR(VARPTR(ZZ(0)))
2610 REM DISPLAY ON SCREEN
2610 REM _MEMVRM(&H1EC0,BASE(12)+11*256,12*256,0)
2610 ZZ(0)=3:ZZ(1)=&H1EC0:ZZ(2)=BASE(12)+11*256:ZZ(3)=12*256:ZZ(4)=0:O=USR(VARPTR(ZZ(0)))

3490 REM _SPRENABLE (SA,SU,1,24)
3490 ZZ(0)=0:ZZ(1)=VARPTR(SA(0,0)):ZZ(2)=VARPTR(SU):ZZ(3)=1:ZZ(4)=24:O=USR(VARPTR(ZZ(0)))
3500 REM DISPLAY ALL SPRITES MANUALLY
3500 REM _SPRGRPMOV(X,Y\16,2,PG)
3500 ZZ(0)=6:ZZ(1)=X:ZZ(2)=Y\16:ZZ(3)=2:ZZ(4)=VARPTR(PG(0,0)):O=USR(VARPTR(ZZ(0)))
3501 REM _SPRGRPMOV(FX,FY,2,FG)
3501 ZZ(0)=6:ZZ(1)=FX:ZZ(2)=FY:ZZ(3)=2:ZZ(4)=VARPTR(FG(0,0)):O=USR(VARPTR(ZZ(0)))
3502 REM _SPRGRPMOV(GX,GY,2,GG)
3502 ZZ(0)=6:ZZ(1)=GX:ZZ(2)=GY:ZZ(3)=2:ZZ(4)=VARPTR(GG(0,0)):O=USR(VARPTR(ZZ(0)))
3503 REM _SPRGRPMOV(SX,SY,2,SG)
3503 ZZ(0)=6:ZZ(1)=SX:ZZ(2)=SY:ZZ(3)=2:ZZ(4)=VARPTR(SG(0,0)):O=USR(VARPTR(ZZ(0)))
3504 REM _SPRGRPMOV(TX,TY,2,TG)
3504 ZZ(0)=6:ZZ(1)=TX:ZZ(2)=TY:ZZ(3)=2:ZZ(4)=VARPTR(TG(0,0)):O=USR(VARPTR(ZZ(0)))
3505 REM _SPRGRPMOV(BX,BY,2,BG)
3505 ZZ(0)=6:ZZ(1)=BX:ZZ(2)=BY:ZZ(3)=2:ZZ(4)=VARPTR(BG(0,0)):O=USR(VARPTR(ZZ(0)))
3506 REM _SPRGRPMOV(CX,CY,2,CG)
3506 ZZ(0)=6:ZZ(1)=CX:ZZ(2)=CY:ZZ(3)=2:ZZ(4)=VARPTR(CG(0,0)):O=USR(VARPTR(ZZ(0)))
3507 SU=1
3510 REM KEY AND PLATFORM ANIMATIONS
3510 FOR I=24 TO 31
3511 REM _ANIMSTART(I)
3511 ZZ(0)=11:ZZ(1)=I:O=USR(VARPTR(ZZ(0)))
3512 NEXT
3540 REM START CRITTERS
3540 FOR I=0 TO 5
3541 REM _AUTOSGAMSTART(I)
3541 ZZ(0)=27:ZZ(1)=I:O=USR(VARPTR(ZZ(0)))
3542 NEXT
3560 REM INIT DONE
3560 X=120:Y=140*16:GOTO 15

4000 REM PRINT
4000 FOR I=1 TO LEN(A$)
4010 A=ASC(MID$(A$,I,1))
4020 IF A>=&H41 AND A<=&H5A THEN K=&H3E60+(A-&H41)*16:GOTO 4070
4030 IF A=32 THEN X=X+4
4040 GOTO 4100
4070 REM _BLIT(X,Y,K,K+8,1,1,&H1EC0,32)
4070 ZZ(0)=4:ZZ(1)=X:ZZ(2)=Y:ZZ(3)=K:ZZ(4)=K+8:ZZ(5)=1:ZZ(6)=1:ZZ(7)=&H1EC0:ZZ(8)=32:O=USR(VARPTR(ZZ(0)))
4075 REM IF J<0 THEN _MEMVRM(&H1EC0,BASE(12)+11*256,12*256,0)
4075 IF J<0 THEN ZZ(0)=3:ZZ(1)=&H1EC0:ZZ(2)=BASE(12)+11*256:ZZ(3)=12*256:ZZ(4)=0:O=USR(VARPTR(ZZ(0)))
4080 IF A=&H49 OR A=&H4A OR A=&H54 OR A=&H59 THEN X=X+6 ELSE X=X+7
4100 NEXT
4110 REM IF J>0 THEN _MEMVRM(&H1EC0,BASE(12)+11*256,12*256,0) ELSE RETURN
4110 IF J>0 THEN ZZ(0)=3:ZZ(1)=&H1EC0:ZZ(2)=BASE(12)+11*256:ZZ(3)=12*256:ZZ(4)=0:O=USR(VARPTR(ZZ(0))) ELSE RETURN
4120 TIME=0
4130 IF TIME<J GOTO 4130
4140 RETURN

30000 REM PLATFORM ANIMATION DEFINITION
30000 DATA &H66,&HCC,&H99,&H33,&H66,&HCC,&H99,&H33
30010 DATA &H99,&H33,&H66,&HCC,&H99,&H33,&H66,&HCC

50000 REM PATTERN AND COLOR CHANGE ANIMATIONS - NUMBER
50000 DATA 52
50010 REM ANIMATION - DEFINITIONS (DURATION, PATTERN, COLOR)
50010 REM PLAYER RIGHT DIRECTION FIRST
50010 REM BLACK
50010 DATA 3,0,1,3,2,1,3,4,1
50030 REM WHITE
50030 DATA 3,1,15,3,3,15,3,5,15
50040 REM PLAYER LEFT DIRECTION
50040 REM BLACK
50040 DATA 3,6,1,3,8,1,3,10,1
50060 REM WHITE
50060 DATA 3,7,15,3,9,15,3,11,15
50080 REM FOX - RIGHT
50080 REM BLACK
50080 DATA 2,12,1,2,14,1,2,16,1
50100 REM YELLOW
50100 DATA 2,13,11,2,15,11,2,17,11
50110 REM FOX - LEFT
50110 REM BLACK
50110 DATA 2,18,1,2,20,1,2,22,1
50120 REM YELLOW
50120 DATA 2,19,11,2,21,11,2,23,11
50130 REM SNAKE - RIGHT
50130 REM BLACK
50130 DATA 2,24,1,2,26,1
50140 REM MAGENTA
50140 DATA 2,25,13,2,27,13
50150 REM SNAKE - LEFT
50150 REM BLACK
50150 DATA 2,28,1,2,30,1
50160 REM MAGENTA
50160 DATA 2,29,13,2,31,13
50170 REM BAT
50170 REM BLACK
50170 DATA 2,32,1,2,34,1,2,36,1
50180 REM BLUE
50180 DATA 2,33,4,2,35,4,2,37,4
50190 REM KEY
50190 DATA 5,39,2,5,39,3,5,39,4,5,39,5,5,39,6,5,39,7,5,39,8,5,39,9,5,39,10,5,39,11,5,39,12,5,39,13,5,39,14,5,39,15

50500 REM PATTERN DEFINITION CHANGE ANIMATIONS - NUMBER
50500 DATA 2
50510 REM ANIMATION - DEFINITONS (DURATION, POINTER)
50510 REM PLATFORM
50510 DATA 10,&H7FF0,10,&H7FF8

51000 REM ANIMATION DEFINITIONS (SIZE,ANIMATION ITEMS,...)
51000 REM TOTAL NUMBER
51000 DATA 16
51010 REM 0 PLAYER - RIGHT BLACK
51010 DATA 4,0,1,2,1
51030 REM 1 PLAYER - RIGHT WHITE
51030 DATA 4,3,4,5,4
51040 REM 2 PLAYER - LEFT BLACK
51040 DATA 4,6,7,8,7
51060 REM 3 PLAYER - LEFT WHITE
51060 DATA 4,9,10,11,10
51080 REM 4 FOX - RIGHT BLACK
51080 DATA 4,12,13,14,13
51090 REM 5 FOX - RIGHT YELLOW
51090 DATA 4,15,16,17,16
51100 REM 6 FOX - LEFT BLACK
51100 DATA 4,18,19,20,19
51110 REM 7 FOX - LEFT YELLOW
51110 DATA 4,21,22,23,22
51120 REM 8 SNAKE - RIGHT BLACK
51120 DATA 2,24,25
51130 REM 9 SNAKE - RIGHT MAGENTA
51130 DATA 2,26,27
51140 REM 10 SNAKE - LEFT BLACK
51140 DATA 2,28,29
51150 REM 11 SNAKE - LEFT MAGENTA
51150 DATA 2,30,31
51160 REM 12 BAT - BLACK
51160 DATA 4,32,33,34,33
51170 REM 13 BAT - BLUE
51170 DATA 4,35,36,37,36
51180 REM 14 KEY
51180 DATA 14,38,39,40,41,42,43,44,45,46,47,48,49,50,51
51190 REM 15 PLATFORM
51190 DATA 2,52,53

52000 REM SPRITE ANIMATIONS (SPRITE NUMBER, ANIMATION DEFINITION, CYCLIC FLAG)
52000 REM TOTAL NUMBER
52000 DATA 29
52010 REM PLAYER ANIMATION
52010 REM 0 SPRITE ANIMATION RIGHT BLACK
52010 DATA 0,0,1
52030 REM 1 SPRITE ANIMATION RIGHT WHITE
52030 DATA 1,1,1
52040 REM 2 SPRITE ANIMATION LEFT BLACK
52040 DATA 0,2,1
52060 REM 3 SPRITE ANIMATION LEFT WHITE
52060 DATA 1,3,1
52080 REM FOX 1 ANIMATION
52080 REM 4 SPRITE ANIMATION RIGHT BLACK
52080 DATA 2,4,1
52090 REM 5 SPRITE ANIMATION RIGHT YELLOW
52090 DATA 3,5,1
52100 REM 6 SPRITE ANIMATION LEFT BLACK
52100 DATA 2,6,1
52110 REM 7 SPRITE ANIMATION LEFT YELLOW
52110 DATA 3,7,1
52120 REM FOX 2 ANIMATION
52120 REM 8 SPRITE ANIMATION RIGHT BLACK
52120 DATA 4,4,1
52130 REM 9 SPRITE ANIMATION RIGHT YELLOW
52130 DATA 5,5,1
52140 REM 10 SPRITE ANIMATION LEFT BLACK
52140 DATA 4,6,1
52150 REM 11 SPRITE ANIMATION LEFT YELLOW
52150 DATA 5,7,1
52160 REM SNAKE 1 ANIMATION
52160 REM 12 SPRITE ANIMATION RIGHT BLACK
52160 DATA 6,8,1
52170 REM 13 SPRITE ANIMATION RIGHT MAGENTA
52170 DATA 7,9,1
52180 REM 14 SPRITE ANIMATION LEFT BLACK
52180 DATA 6,10,1
52190 REM 15 SPRITE ANIMATION LEFT MAGENTA
52190 DATA 7,11,1
52200 REM SNAKE 2 ANIMATION
52200 REM 16 SPRITE ANIMATION RIGHT BLACK
52200 DATA 8,8,1
52210 REM 17 SPRITE ANIMATION RIGHT MAGENTA
52210 DATA 9,9,1
52220 REM 18 SPRITE ANIMATION LEFT BLACK
52220 DATA 8,10,1
52230 REM 19 SPRITE ANIMATION LEFT MAGENTA
52230 DATA 9,11,1
52240 REM BAT 1 ANIMATION
52240 REM 20 SPRITE ANIMATION BLACK
52240 DATA 10,12,1
52250 REM 21 SPRITE ANIMATION BLUE
52250 DATA 11,13,1
52260 REM BAT 2 ANIMATION
52260 REM 22 SPRITE ANIMATION BLACK
52260 DATA 12,12,1
52270 REM 23 SPRITE ANIMATION BLUE
52270 DATA 13,13,1
52280 REM 24 KEY 1
52280 DATA 14,14,1
52290 REM 25 KEY 2
52290 DATA 15,14,1
52300 REM 26 KEY 3
52300 DATA 16,14,1
52310 REM 27 KEY 4
52310 DATA 17,14,1
52320 REM 28 KEY 5
52320 DATA 18,14,1

54000 REM CHARACTER ANIMATIONS (CHARACTER NUMBER, ANIMATION DEFINITION, CYCLIC FLAG)
54000 REM TOTAL NUMBER
54000 DATA 3
54010 REM PLATFORM 29,30,31
54010 DATA 255,15,1
54020 DATA 511,15,1
54030 DATA 767,15,1

55000 REM CHARACTER DATA FOR END SEQUENCE REPAIR
55000 REM 255th COLOR INFO
55000 DATA 60,193,193,60,60,60,60,60
55010 REM 255th PATTERN
55010 DATA 96,176,248,216,0,128,0,112
55020 REM 511th COLOR
55020 DATA 193,193,193,193,193,193,161,193
55030 REM 511th PATTERN
55030 DATA 119,221,118,16,34,88,16,69
55040 REM 767th COLOR
55040 DATA 193,193,193,193,193,193,193,193
55050 REM 767th PATTERN
55050 DATA 255,255,255,255,255,255,255,249